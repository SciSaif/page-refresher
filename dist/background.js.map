{"version":3,"file":"background.js","mappings":"gVAAA,IAAIA,EACAC,GAAU,EAKd,SAAeC,EAAYC,G,yCACvBC,QAAQC,IAAI,kBAAmBF,GAC/B,MAAMG,QAAgBC,OAAOC,UAAUC,cAAc,CACjDC,OAAQ,CAAEC,MAAOR,EAAIS,IACrBC,KAAM,MACqBC,SAASC,cAAc,gBAMlDR,OAAOS,QAAQC,UACfb,QAAQc,MAAMX,OAAOS,QAAQC,WAIZX,EAAQ,GAAGa,QAG5Bf,QAAQC,IAAI,cAIZE,OAAOa,KAAKC,OAAOlB,EAAIS,MAOvBU,aAAatB,GACbO,OAAOgB,cAAcC,OAAO,GAAI,CAC5BC,MAAO,4BACPC,QAAS,uCACTC,QAAS,uBACTC,KAAM,UAEV3B,GAAU,EAGlB,G,CA3CAG,QAAQC,IAAI,iCA8CZE,OAAOa,KAAKS,YAAYC,aAAY,SAAgBC,G,+CAChD,IAAK9B,EAAS,OAEd,IACKE,SAAaI,OAAOa,KAAKY,MADX,CAAEC,QAAQ,EAAMC,eAAe,IAE7C/B,IAIO,QAAP,EAAAA,EAAIgC,WAAG,eAAEC,WAAW,wCAKzBlC,EAAYC,E,OAIhBI,OAAOa,KAAKiB,UAAUP,aAAY,SAAgBnB,EAAO2B,EAAYnC,G,+CAC5DF,IAEO,QAAP,EAAAE,EAAIgC,WAAG,eAAEC,WAAW,wCAIC,aAAtBE,EAAWC,QAEXC,YAAW,KACPtC,EAAYC,EAAI,GACjB,I,OAkCXI,OAAOkC,QAAQC,KAAKC,IAAI,WAAW,EAAG1C,cAE9BA,IADAA,C,IAQRM,OAAOS,QAAQ4B,UAAUd,aAAY,SACjCe,EACAC,EACAC,G,yCAGA,GAAsB,GAAlBF,EAAQG,OAAgB,CACxB5C,QAAQC,IAAI,WACZJ,GAAU,EAEV,MAAOE,SAAaI,OAAOa,KAAKY,MAAM,CAClCC,QAAQ,EACRC,eAAe,IAEnB,IAAK/B,EAAK,OACVD,EAAYC,E,MAEZC,QAAQC,IAAI,YACZJ,GAAU,EAEd8C,EAAa,CAAE5B,OAAQ,WAC3B,G,OC1IoB","sources":["webpack://chegg-refresh/./background.ts","webpack://chegg-refresh/webpack/startup"],"sourcesContent":["let timerId: any;\r\nlet enabled = false;\r\n\r\nconsole.log(\"Chegg Auto Refresh is running\");\r\n\r\n// function to refresh the page after 5 seconds if the content is found\r\nasync function refreshPage(tab: chrome.tabs.Tab) {\r\n    console.log(\"in refresh page\", tab);\r\n    const results = await chrome.scripting.executeScript({\r\n        target: { tabId: tab.id },\r\n        func: () => {\r\n            const contentFound = !!document.querySelector(\".sc-kMizLa\");\r\n            return contentFound;\r\n        },\r\n    });\r\n    // console.log(\"yooo!: \", results);\r\n\r\n    if (chrome.runtime.lastError) {\r\n        console.error(chrome.runtime.lastError);\r\n        return;\r\n    }\r\n\r\n    const contentFound = results[0].result;\r\n    // If the content is not found, print question found to console\r\n    if (contentFound) {\r\n        console.log(\"refreshing\");\r\n\r\n        // refresh the page after 5 seconds\r\n        // timerId = setTimeout(() => {\r\n        chrome.tabs.reload(tab.id);\r\n        // }, 5000);\r\n    }\r\n    // else if content is found, refresh the page after 5 seconds\r\n    else {\r\n        // console.log(\"Content not found\");\r\n        // If the content is found, clear the timer\r\n        clearTimeout(timerId);\r\n        chrome.notifications.create(\"\", {\r\n            title: \"Found a question for you!\",\r\n            message: \"There is a question waiting for you!\",\r\n            iconUrl: \"/images/chegg-48.png\",\r\n            type: \"basic\",\r\n        });\r\n        enabled = false;\r\n        // alert the user that the content is not found\r\n    }\r\n}\r\n\r\n// listen for tab activation\r\nchrome.tabs.onActivated.addListener(async function (activeInfo) {\r\n    if (!enabled) return;\r\n\r\n    let queryOptions = { active: true, currentWindow: true };\r\n    let [tab] = await chrome.tabs.query(queryOptions);\r\n    if (!tab) {\r\n        // console.log(\"no tab found\");\r\n        return;\r\n    }\r\n    if (!tab.url?.startsWith(\"https://expert.chegg.com/expertqna\")) {\r\n        // console.log(\"Not Chegg\");\r\n        return;\r\n    }\r\n\r\n    refreshPage(tab);\r\n});\r\n\r\n// listen for tab refresh\r\nchrome.tabs.onUpdated.addListener(async function (tabId, changeInfo, tab) {\r\n    if (!enabled) return;\r\n\r\n    if (!tab.url?.startsWith(\"https://expert.chegg.com/expertqna\")) {\r\n        // console.log(\"Not Chegg\");\r\n        return;\r\n    }\r\n    if (changeInfo.status === \"complete\") {\r\n        // console.log(\"tab updated\", changeInfo, tab);\r\n        setTimeout(() => {\r\n            refreshPage(tab);\r\n        }, 10000);\r\n    }\r\n});\r\n\r\n//popup.html\r\n// <!DOCTYPE html>\r\n// <html>\r\n//   <head>\r\n//     <title>Auto Refresh</title>\r\n//   </head>\r\n//   <body>\r\n//     <label>\r\n//       <input type=\"checkbox\" id=\"toggle\">\r\n//       Auto Refresh\r\n//     </label>\r\n//     <script src=\"dist/popup.ts\"></script>\r\n//   </body>\r\n// </html>\r\n\r\n// popup.ts\r\n// const toggle = document.getElementById(\"toggle\") as HTMLInputElement;\r\n// console.log(\"toggle\");\r\n\r\n// chrome.storage.sync.get(\"enabled\", ({ enabled }) => {\r\n//     toggle.checked = enabled;\r\n// });\r\n\r\n// toggle.addEventListener(\"change\", (e: Event) => {\r\n//     const target = e.target as HTMLInputElement;\r\n//     const checked = target.checked;\r\n//     chrome.storage.sync.set({ enabled: checked });\r\n// });\r\n\r\n// set enabled to true if the toggle is checked and false if it is not\r\nchrome.storage.sync.get(\"enabled\", ({ enabled }) => {\r\n    if (enabled) {\r\n        enabled = true;\r\n    } else {\r\n        enabled = false;\r\n    }\r\n});\r\n\r\n// Add a message listener to listen for messages from popup.js\r\nchrome.runtime.onMessage.addListener(async function (\r\n    request,\r\n    sender,\r\n    sendResponse\r\n) {\r\n    // If the request action is \"runScript\"\r\n    if (request.action == true) {\r\n        console.log(\"enabled\");\r\n        enabled = true;\r\n        // Get the active tab\r\n        const [tab] = await chrome.tabs.query({\r\n            active: true,\r\n            currentWindow: true,\r\n        });\r\n        if (!tab) return;\r\n        refreshPage(tab);\r\n    } else {\r\n        console.log(\"disabled\");\r\n        enabled = false;\r\n    }\r\n    sendResponse({ result: \"success\" });\r\n});\r\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[69]();\n"],"names":["timerId","enabled","refreshPage","tab","console","log","results","chrome","scripting","executeScript","target","tabId","id","func","document","querySelector","runtime","lastError","error","result","tabs","reload","clearTimeout","notifications","create","title","message","iconUrl","type","onActivated","addListener","activeInfo","query","active","currentWindow","url","startsWith","onUpdated","changeInfo","status","setTimeout","storage","sync","get","onMessage","request","sender","sendResponse","action"],"sourceRoot":""}