{"version":3,"file":"background.js","mappings":"gVAAA,IAAIA,EACAC,GAAiB,EAMrB,SAAeC,EAAYC,G,yCACvB,MAAMC,QAAgBC,OAAOC,UAAUC,cAAc,CACjDC,OAAQ,CAAEC,MAAON,EAAIO,IACrBC,KAAM,KACFC,QAAQC,IAAI,SACZ,MAAMC,IAAiBC,SAASC,cAC5B,gCAaJ,OATAX,OAAOY,QAAQC,KAAKC,IAAI,aAAa,EAAGC,gBACpCR,QAAQC,IAAI,cAAeO,IACtBN,GAAgBM,IACjBL,SAASC,cAAc,QAAQK,MAAMC,gBACjC,M,IAKLR,CAAY,IAG3BF,QAAQC,IAAI,UAAWT,GAEnBC,OAAOkB,QAAQC,UACfZ,QAAQa,MAAMpB,OAAOkB,QAAQC,WAIZpB,EAAQ,GAAGsB,QAG5Bd,QAAQC,IAAI,cAIZR,OAAOsB,KAAKC,OAAOzB,EAAIO,MAKvBE,QAAQC,IAAI,qBAEZgB,aAAa7B,GACbK,OAAOyB,cAAcC,OAAO,GAAI,CAC5BC,MAAO,4BACPC,QAAS,uCACTC,QAAS,uBACTC,KAAM,UAEVlC,GAAiB,EAEjBI,OAAOY,QAAQC,KAAKkB,IAAI,CAAEnC,gBAAgB,IAIlD,G,CA3DAW,QAAQC,IAAI,iCA8DZR,OAAOsB,KAAKU,UAAUC,aAAY,SAAU7B,EAAO8B,EAAYpC,G,QAE3D,GAAKF,KAIU,QAAP,EAAAE,EAAIqC,WAAG,eAAEC,WAAW,yCACb,QAAP,EAAAtC,EAAIqC,WAAG,eAAEC,WAAW,mDAc5B,MAP0B,aAAtBF,EAAWG,QAEXC,YAAW,KACPzC,EAAYC,EAAI,GACjB,MAGA,CACX,IAYAE,OAAOkB,QAAQqB,UAAUN,aAAY,SAAUO,EAASC,EAAQC,GAC5D,OAA8B,GAA1BF,EAAQ5C,gBACRA,GAAiB,EACjBW,QAAQC,IAAI,mBAMZR,OAAOsB,KACFqB,MAAM,CACHC,QAAQ,EACRC,eAAe,IAElBC,MAAMxB,I,QACH,MAAMxB,EAAMwB,EAAK,GAEjB,GADAf,QAAQC,IAAI,MAAOV,GACdA,EACL,QAEe,QAAP,EAAAA,EAAIqC,WAAG,eAAEC,WACL,0CAEG,QAAP,EAAAtC,EAAIqC,WAAG,eAAEC,WACL,wDAMZvC,EAAYC,EAAI,KAGjB,GAC0B,GAA1B0C,EAAQ5C,iBACfW,QAAQC,IAAI,oBACZZ,GAAiB,GACV,EAaf,G,IClJoB","sources":["webpack://chegg-refresh/./background.ts","webpack://chegg-refresh/webpack/startup"],"sourcesContent":["let timerId: any;\r\nlet refreshEnabled = false;\r\n// let bgEnabled = false;\r\n\r\nconsole.log(\"Chegg Auto Refresh is running\");\r\n\r\n// function to refresh the page after 5 seconds if the content is found\r\nasync function refreshPage(tab: chrome.tabs.Tab) {\r\n    const results = await chrome.scripting.executeScript({\r\n        target: { tabId: tab.id },\r\n        func: () => {\r\n            console.log(\"sdfsd\");\r\n            const contentFound = !!document.querySelector(\r\n                'div[data-test=\"no-question\"]'\r\n            );\r\n            // console.log(\"bgEnabled: \", bgEnabled);\r\n            // get bgEnabled from local storage\r\n            chrome.storage.sync.get(\"bgEnabled\", ({ bgEnabled }) => {\r\n                console.log(\"bgEnabled: \", bgEnabled);\r\n                if (!contentFound && bgEnabled) {\r\n                    document.querySelector(\"body\").style.backgroundColor =\r\n                        \"red\";\r\n                }\r\n            });\r\n\r\n            // console.log(\"contentFound\", contentFound);\r\n            return contentFound;\r\n        },\r\n    });\r\n    console.log(\"yooo!: \", results);\r\n\r\n    if (chrome.runtime.lastError) {\r\n        console.error(chrome.runtime.lastError);\r\n        return;\r\n    }\r\n\r\n    const contentFound = results[0].result;\r\n    // If the content is not found, print question found to console\r\n    if (contentFound) {\r\n        console.log(\"refreshing\");\r\n\r\n        // refresh the page after 5 seconds\r\n        // timerId = setTimeout(() => {\r\n        chrome.tabs.reload(tab.id);\r\n        // }, 5000);\r\n    }\r\n    // else if content is found, refresh the page after 5 seconds\r\n    else {\r\n        console.log(\"Content not found\");\r\n        // If the content is found, clear the timer\r\n        clearTimeout(timerId);\r\n        chrome.notifications.create(\"\", {\r\n            title: \"Found a question for you!\",\r\n            message: \"There is a question waiting for you!\",\r\n            iconUrl: \"/images/chegg-48.png\",\r\n            type: \"basic\",\r\n        });\r\n        refreshEnabled = false;\r\n\r\n        chrome.storage.sync.set({ refreshEnabled: false });\r\n\r\n        // alert the user that the content is not found\r\n    }\r\n}\r\n\r\n// listen for tab refresh\r\nchrome.tabs.onUpdated.addListener(function (tabId, changeInfo, tab) {\r\n    // console.log(\"enabled\", enabled);\r\n    if (!refreshEnabled) return;\r\n    // console.log(\"e1\");\r\n    if (\r\n        !(\r\n            tab.url?.startsWith(\"https://expert.chegg.com/expertqna\") ||\r\n            tab.url?.startsWith(\"https://expert.chegg.com/qna/authoring/answer\")\r\n        )\r\n    ) {\r\n        // console.log(\"Not Chegg\");\r\n        return;\r\n    }\r\n    // console.log(\"e2\");\r\n    if (changeInfo.status === \"complete\") {\r\n        // console.log(\"tab updated\", changeInfo, tab);\r\n        setTimeout(() => {\r\n            refreshPage(tab);\r\n        }, 8000);\r\n    }\r\n\r\n    return true;\r\n});\r\n\r\n// // set enabled to true if the toggle is checked and false if it is not\r\n// chrome.storage.sync.get(\"refreshEnabled\", ({ refreshEnabled }) => {\r\n//     if (refreshEnabled) {\r\n//         refreshEnabled = true;\r\n//     } else {\r\n//         refreshEnabled = false;\r\n//     }\r\n// });\r\n\r\n// Add a message listener to listen for messages from popup.js\r\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\r\n    if (request.refreshEnabled == true) {\r\n        refreshEnabled = true;\r\n        console.log(\"refresh enabled\");\r\n        // Get the active tab\r\n        // const [tab] = await chrome.tabs.query({\r\n        //     active: true,\r\n        //     currentWindow: true,\r\n        // });\r\n        chrome.tabs\r\n            .query({\r\n                active: true,\r\n                currentWindow: true,\r\n            })\r\n            .then((tabs) => {\r\n                const tab = tabs[0];\r\n                console.log(\"tab\", tab);\r\n                if (!tab) return;\r\n                if (\r\n                    !(\r\n                        tab.url?.startsWith(\r\n                            \"https://expert.chegg.com/expertqna\"\r\n                        ) ||\r\n                        tab.url?.startsWith(\r\n                            \"https://expert.chegg.com/qna/authoring/answer\"\r\n                        )\r\n                    )\r\n                ) {\r\n                    return true;\r\n                }\r\n                refreshPage(tab);\r\n                // console.log(\"after ref resh page\");\r\n            });\r\n        return true;\r\n    } else if (request.refreshEnabled == false) {\r\n        console.log(\"refresh disabled\");\r\n        refreshEnabled = false;\r\n        return true;\r\n    }\r\n    // else if (request.bgEnabled == true) {\r\n    //     console.log(\"bg enabled\");\r\n    //     bgEnabled = true;\r\n    //     return true;\r\n    // } else if (request.bgEnabled == false) {\r\n    //     console.log(\"bg disabled\");\r\n    //     bgEnabled = false;\r\n    //     return true;\r\n    // }\r\n\r\n    return false;\r\n});\r\n\r\n// // listen for tab activation\r\n// chrome.tabs.onActivated.addListener(async function (activeInfo) {\r\n//     if (!enabled) return;\r\n\r\n//     let queryOptions = { active: true, currentWindow: true };\r\n//     let [tab] = await chrome.tabs.query(queryOptions);\r\n//     if (!tab) {\r\n//         // console.log(\"no tab found\");\r\n//         return;\r\n//     }\r\n//     if (!tab.url?.startsWith(\"https://expert.chegg.com/expertqna\")) {\r\n//         // console.log(\"Not Chegg\");\r\n//         return;\r\n//     }\r\n\r\n//     refreshPage(tab);\r\n// });\r\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[69]();\n"],"names":["timerId","refreshEnabled","refreshPage","tab","results","chrome","scripting","executeScript","target","tabId","id","func","console","log","contentFound","document","querySelector","storage","sync","get","bgEnabled","style","backgroundColor","runtime","lastError","error","result","tabs","reload","clearTimeout","notifications","create","title","message","iconUrl","type","set","onUpdated","addListener","changeInfo","url","startsWith","status","setTimeout","onMessage","request","sender","sendResponse","query","active","currentWindow","then"],"sourceRoot":""}